
RobotRecorreLaberinto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000622  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000622  000006b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800062  00800062  000006b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aa3  00000000  00000000  000007c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002ae  00000000  00000000  0000126b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000043f  00000000  00000000  00001519  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000218  00000000  00000000  00001958  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000386  00000000  00000000  00001b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000030c  00000000  00000000  00001ef6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00002202  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 96 01 	jmp	0x32c	; 0x32c <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e2       	ldi	r30, 0x22	; 34
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 98 02 	call	0x530	; 0x530 <main>
  8a:	0c 94 0f 03 	jmp	0x61e	; 0x61e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <configINT>:
	}
	return respuesta;
}

void configINT(){
	MCUCR = 0b00001100;//0x0F;
  92:	8c e0       	ldi	r24, 0x0C	; 12
  94:	85 bf       	out	0x35, r24	; 53
	MCUCSR = 0b01000000;
  96:	80 e4       	ldi	r24, 0x40	; 64
  98:	84 bf       	out	0x34, r24	; 52
	GIFR = 0b11100000;
  9a:	80 ee       	ldi	r24, 0xE0	; 224
  9c:	8a bf       	out	0x3a, r24	; 58
	GICR=0b1110000;
  9e:	80 e7       	ldi	r24, 0x70	; 112
  a0:	8b bf       	out	0x3b, r24	; 59
	sei();
  a2:	78 94       	sei
  a4:	08 95       	ret

000000a6 <configSERIAL>:
}

void configSERIAL(){
	UCSRA = 0b00100010 ; //Sin banderas,  U2X = 1 en modo normal
  a6:	82 e2       	ldi	r24, 0x22	; 34
  a8:	8b b9       	out	0x0b, r24	; 11
	UCSRB = 0b10011000 ; //Para cambiar las x ver Pág. 191 (se configura si quiero enviar y/o recibir datos), 8 bits
  aa:	88 e9       	ldi	r24, 0x98	; 152
  ac:	8a b9       	out	0x0a, r24	; 10
	UCSRC = 0b10000110 ; //Usar el UCSRC, modo asíncrono, sin paridad a 1 bit (stop), para 8 bits
  ae:	86 e8       	ldi	r24, 0x86	; 134
  b0:	80 bd       	out	0x20, r24	; 32
	UBRRL = 12 ; //baud rate a 9600
  b2:	8c e0       	ldi	r24, 0x0C	; 12
  b4:	89 b9       	out	0x09, r24	; 9
  b6:	08 95       	ret

000000b8 <configTIMER>:
}

void configTIMER(){
	TCCR0 = 0b00001101 ; //Modo por comparación con prescaler a 1024
  b8:	8d e0       	ldi	r24, 0x0D	; 13
  ba:	83 bf       	out	0x33, r24	; 51
	TIMSK = 0b00000010 ; //Modo por comparación
  bc:	82 e0       	ldi	r24, 0x02	; 2
  be:	89 bf       	out	0x39, r24	; 57
	TIFR = 0b00000011 ; //Banderas de interrupción desactivadas
  c0:	83 e0       	ldi	r24, 0x03	; 3
  c2:	88 bf       	out	0x38, r24	; 56
	TCNT0 = 0 ; //Inicia el contador en 0
  c4:	12 be       	out	0x32, r1	; 50
	OCR0 = 243 ;
  c6:	83 ef       	ldi	r24, 0xF3	; 243
  c8:	8c bf       	out	0x3c, r24	; 60
  ca:	08 95       	ret

000000cc <config>:
}

void config(){
	// Botones
	DDRC= 0x00;
  cc:	14 ba       	out	0x14, r1	; 20
	PORTC = 0XFF;
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	85 bb       	out	0x15, r24	; 21
	// Motores
		//Motor 1 (Izquierda)
		DDRA = 0xFF;
  d2:	8a bb       	out	0x1a, r24	; 26
		// Motor 2 (Derecha)
		DDRB = 0xFF;
  d4:	87 bb       	out	0x17, r24	; 23
	// BUMPER
	DDRD = 0b00000010;
  d6:	92 e0       	ldi	r25, 0x02	; 2
  d8:	91 bb       	out	0x11, r25	; 17
	PORTD = 0xFF;
  da:	82 bb       	out	0x12, r24	; 18
	
	//INTERRUPCIONES
	configINT();
  dc:	0e 94 49 00 	call	0x92	; 0x92 <configINT>
	//TIMER
	configTIMER();
  e0:	0e 94 5c 00 	call	0xb8	; 0xb8 <configTIMER>
	//SERIAL
	configSERIAL();
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <configSERIAL>
  e8:	08 95       	ret

000000ea <recorrer>:
}

void recorrer(){
	PORTA = 1;
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	8b bb       	out	0x1b, r24	; 27
	PORTB = 1;
  ee:	88 bb       	out	0x18, r24	; 24
	//resetPaso();
	activado = true;
  f0:	80 93 66 00 	sts	0x0066, r24
  f4:	08 95       	ret

000000f6 <detener>:
}

void detener(){
	PORTA = 0;
  f6:	1b ba       	out	0x1b, r1	; 27
	PORTB = 0;
  f8:	18 ba       	out	0x18, r1	; 24
  fa:	08 95       	ret

000000fc <reversa>:
}

void reversa(){
	PORTA = 2;
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	8b bb       	out	0x1b, r24	; 27
	PORTB = 2;
 100:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	8f e4       	ldi	r24, 0x4F	; 79
 104:	93 ec       	ldi	r25, 0xC3	; 195
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <reversa+0xa>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <reversa+0x10>
 10c:	00 00       	nop
	_delay_ms(200);
	detener();
 10e:	0e 94 7b 00 	call	0xf6	; 0xf6 <detener>
 112:	87 ea       	ldi	r24, 0xA7	; 167
 114:	91 e6       	ldi	r25, 0x61	; 97
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <reversa+0x1a>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <reversa+0x20>
 11c:	00 00       	nop
 11e:	08 95       	ret

00000120 <rutaCompletada>:
	_delay_ms(100);
}

void rutaCompletada() {
	detener();
 120:	0e 94 7b 00 	call	0xf6	; 0xf6 <detener>
	activado=false;
 124:	10 92 66 00 	sts	0x0066, r1
	eeprom_write_byte((uint8_t *)(locINST),'F');
 128:	80 91 70 00 	lds	r24, 0x0070
 12c:	90 91 71 00 	lds	r25, 0x0071
 130:	66 e4       	ldi	r22, 0x46	; 70
 132:	0e 94 02 03 	call	0x604	; 0x604 <__eewr_byte_m16a>
	locINST++;
 136:	80 91 70 00 	lds	r24, 0x0070
 13a:	90 91 71 00 	lds	r25, 0x0071
 13e:	01 96       	adiw	r24, 0x01	; 1
 140:	90 93 71 00 	sts	0x0071, r25
 144:	80 93 70 00 	sts	0x0070, r24
	eeprom_write_byte((uint8_t *)(locMOV),'F');
 148:	80 91 6b 00 	lds	r24, 0x006B
 14c:	90 91 6c 00 	lds	r25, 0x006C
 150:	66 e4       	ldi	r22, 0x46	; 70
 152:	0e 94 02 03 	call	0x604	; 0x604 <__eewr_byte_m16a>
	locMOV--;
 156:	80 91 6b 00 	lds	r24, 0x006B
 15a:	90 91 6c 00 	lds	r25, 0x006C
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	90 93 6c 00 	sts	0x006C, r25
 164:	80 93 6b 00 	sts	0x006B, r24
	locINST=0;
 168:	10 92 71 00 	sts	0x0071, r1
 16c:	10 92 70 00 	sts	0x0070, r1
	locMOV =500;
 170:	84 ef       	ldi	r24, 0xF4	; 244
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	90 93 6c 00 	sts	0x006C, r25
 178:	80 93 6b 00 	sts	0x006B, r24
 17c:	08 95       	ret

0000017e <escribirInsMov>:
}

void escribirInsMov(){
	eeprom_write_byte((uint8_t *)(locINST), instruccion);
 17e:	60 91 67 00 	lds	r22, 0x0067
 182:	80 91 70 00 	lds	r24, 0x0070
 186:	90 91 71 00 	lds	r25, 0x0071
 18a:	0e 94 02 03 	call	0x604	; 0x604 <__eewr_byte_m16a>
	locINST++;
 18e:	80 91 70 00 	lds	r24, 0x0070
 192:	90 91 71 00 	lds	r25, 0x0071
 196:	01 96       	adiw	r24, 0x01	; 1
 198:	90 93 71 00 	sts	0x0071, r25
 19c:	80 93 70 00 	sts	0x0070, r24
	eeprom_write_byte((uint8_t *)(locMOV), movimiento);
 1a0:	60 91 68 00 	lds	r22, 0x0068
 1a4:	80 91 6b 00 	lds	r24, 0x006B
 1a8:	90 91 6c 00 	lds	r25, 0x006C
 1ac:	0e 94 02 03 	call	0x604	; 0x604 <__eewr_byte_m16a>
	locMOV--;
 1b0:	80 91 6b 00 	lds	r24, 0x006B
 1b4:	90 91 6c 00 	lds	r25, 0x006C
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	90 93 6c 00 	sts	0x006C, r25
 1be:	80 93 6b 00 	sts	0x006B, r24
 1c2:	08 95       	ret

000001c4 <escribirMOV>:
}

void escribirMOV(char mov){
 1c4:	68 2f       	mov	r22, r24
	eeprom_write_byte((uint8_t *)(locMOV), mov);
 1c6:	80 91 6b 00 	lds	r24, 0x006B
 1ca:	90 91 6c 00 	lds	r25, 0x006C
 1ce:	0e 94 02 03 	call	0x604	; 0x604 <__eewr_byte_m16a>
	locMOV--;
 1d2:	80 91 6b 00 	lds	r24, 0x006B
 1d6:	90 91 6c 00 	lds	r25, 0x006C
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	90 93 6c 00 	sts	0x006C, r25
 1e0:	80 93 6b 00 	sts	0x006B, r24
 1e4:	08 95       	ret

000001e6 <vueltaDerechaSolo>:
}
// APPPPPPAPPAPDBPPIPPIF
// APPPPPPIPPBPIPAPPDPPIF

void vueltaDerechaSolo(){
	PORTA = 1;
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	8b bb       	out	0x1b, r24	; 27
	PORTB = 0;
 1ea:	18 ba       	out	0x18, r1	; 24
 1ec:	2f ed       	ldi	r18, 0xDF	; 223
 1ee:	83 e9       	ldi	r24, 0x93	; 147
 1f0:	94 e0       	ldi	r25, 0x04	; 4
 1f2:	21 50       	subi	r18, 0x01	; 1
 1f4:	80 40       	sbci	r24, 0x00	; 0
 1f6:	90 40       	sbci	r25, 0x00	; 0
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <vueltaDerechaSolo+0xc>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <vueltaDerechaSolo+0x16>
 1fc:	00 00       	nop
 1fe:	08 95       	ret

00000200 <vueltaIzquierdaSolo>:
	_delay_ms(1500);
}

void vueltaIzquierdaSolo(){
	PORTA = 0;
 200:	1b ba       	out	0x1b, r1	; 27
	PORTB = 1;
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	88 bb       	out	0x18, r24	; 24
 206:	2f eb       	ldi	r18, 0xBF	; 191
 208:	87 e2       	ldi	r24, 0x27	; 39
 20a:	99 e0       	ldi	r25, 0x09	; 9
 20c:	21 50       	subi	r18, 0x01	; 1
 20e:	80 40       	sbci	r24, 0x00	; 0
 210:	90 40       	sbci	r25, 0x00	; 0
 212:	e1 f7       	brne	.-8      	; 0x20c <vueltaIzquierdaSolo+0xc>
 214:	00 c0       	rjmp	.+0      	; 0x216 <vueltaIzquierdaSolo+0x16>
 216:	00 00       	nop
 218:	08 95       	ret

0000021a <resetPaso>:
	_delay_ms(3000);
}

void resetPaso(){
	veces = 0;
 21a:	10 92 65 00 	sts	0x0065, r1
	paso = 0;
 21e:	10 92 62 00 	sts	0x0062, r1
 222:	08 95       	ret

00000224 <vueltaDerecha>:
	eeprom_write_byte((uint8_t *)(locMOV), mov);
	locMOV--;
}

void vueltaDerecha(char inst, char mov, char ori) {
	 instruccion = inst;
 224:	80 93 67 00 	sts	0x0067, r24
	 movimiento = mov;
 228:	60 93 68 00 	sts	0x0068, r22
	 orientacion = ori;
 22c:	40 93 64 00 	sts	0x0064, r20
	 PORTA = 1;
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	8b bb       	out	0x1b, r24	; 27
	 PORTB = 0;
 234:	18 ba       	out	0x18, r1	; 24
 236:	2f ed       	ldi	r18, 0xDF	; 223
 238:	83 e9       	ldi	r24, 0x93	; 147
 23a:	94 e0       	ldi	r25, 0x04	; 4
 23c:	21 50       	subi	r18, 0x01	; 1
 23e:	80 40       	sbci	r24, 0x00	; 0
 240:	90 40       	sbci	r25, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <vueltaDerecha+0x18>
 244:	00 c0       	rjmp	.+0      	; 0x246 <vueltaDerecha+0x22>
 246:	00 00       	nop
	 _delay_ms(1500);
	 resetPaso();
 248:	0e 94 0d 01 	call	0x21a	; 0x21a <resetPaso>
	 recorrer();
 24c:	0e 94 75 00 	call	0xea	; 0xea <recorrer>
 250:	08 95       	ret

00000252 <vueltaIzquierda>:
}

void vueltaIzquierda(char inst, char mov, char ori) {
	instruccion = inst;
 252:	80 93 67 00 	sts	0x0067, r24
	movimiento = mov;
 256:	60 93 68 00 	sts	0x0068, r22
	orientacion = ori;
 25a:	40 93 64 00 	sts	0x0064, r20
	PORTA = 0;
 25e:	1b ba       	out	0x1b, r1	; 27
	PORTB = 1;
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	88 bb       	out	0x18, r24	; 24
 264:	2f eb       	ldi	r18, 0xBF	; 191
 266:	87 e2       	ldi	r24, 0x27	; 39
 268:	99 e0       	ldi	r25, 0x09	; 9
 26a:	21 50       	subi	r18, 0x01	; 1
 26c:	80 40       	sbci	r24, 0x00	; 0
 26e:	90 40       	sbci	r25, 0x00	; 0
 270:	e1 f7       	brne	.-8      	; 0x26a <vueltaIzquierda+0x18>
 272:	00 c0       	rjmp	.+0      	; 0x274 <vueltaIzquierda+0x22>
 274:	00 00       	nop
	_delay_ms(3000);
	
	escribirInsMov();
 276:	0e 94 bf 00 	call	0x17e	; 0x17e <escribirInsMov>
	intento=0;
 27a:	10 92 72 00 	sts	0x0072, r1
	resetPaso();
 27e:	0e 94 0d 01 	call	0x21a	; 0x21a <resetPaso>
	
	recorrer();
 282:	0e 94 75 00 	call	0xea	; 0xea <recorrer>
 286:	08 95       	ret

00000288 <escribirPaso>:
	veces = 0;
	paso = 0;
}

void escribirPaso(){
	eeprom_write_byte((uint8_t *)(locINST), 'P');
 288:	80 91 70 00 	lds	r24, 0x0070
 28c:	90 91 71 00 	lds	r25, 0x0071
 290:	60 e5       	ldi	r22, 0x50	; 80
 292:	0e 94 02 03 	call	0x604	; 0x604 <__eewr_byte_m16a>
	locINST++;
 296:	80 91 70 00 	lds	r24, 0x0070
 29a:	90 91 71 00 	lds	r25, 0x0071
 29e:	01 96       	adiw	r24, 0x01	; 1
 2a0:	90 93 71 00 	sts	0x0071, r25
 2a4:	80 93 70 00 	sts	0x0070, r24
	eeprom_write_byte((uint8_t *)(locMOV),'P');
 2a8:	80 91 6b 00 	lds	r24, 0x006B
 2ac:	90 91 6c 00 	lds	r25, 0x006C
 2b0:	60 e5       	ldi	r22, 0x50	; 80
 2b2:	0e 94 02 03 	call	0x604	; 0x604 <__eewr_byte_m16a>
	locMOV--;
 2b6:	80 91 6b 00 	lds	r24, 0x006B
 2ba:	90 91 6c 00 	lds	r25, 0x006C
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	90 93 6c 00 	sts	0x006C, r25
 2c4:	80 93 6b 00 	sts	0x006B, r24
 2c8:	08 95       	ret

000002ca <__vector_11>:
}

// SERIAL
ISR (USART_RXC_vect) 
{
 2ca:	1f 92       	push	r1
 2cc:	0f 92       	push	r0
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	0f 92       	push	r0
 2d2:	11 24       	eor	r1, r1
 2d4:	8f 93       	push	r24

	//uint8_t p = UDR;
	//UDR='E';
	recivido = true;
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	80 93 63 00 	sts	0x0063, r24
	UCSRA = 0b00100010 ;
 2dc:	82 e2       	ldi	r24, 0x22	; 34
 2de:	8b b9       	out	0x0b, r24	; 11
		//locLocMOV--;
		//if(x != 0x46)break;
	//}
	
	//sei();
}
 2e0:	8f 91       	pop	r24
 2e2:	0f 90       	pop	r0
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	0f 90       	pop	r0
 2e8:	1f 90       	pop	r1
 2ea:	18 95       	reti

000002ec <__vector_19>:

// TIMER
ISR (TIMER0_COMP_vect) 
{
 2ec:	1f 92       	push	r1
 2ee:	0f 92       	push	r0
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	0f 92       	push	r0
 2f4:	11 24       	eor	r1, r1
 2f6:	8f 93       	push	r24
	if (activado==true)
 2f8:	80 91 66 00 	lds	r24, 0x0066
 2fc:	88 23       	and	r24, r24
 2fe:	81 f0       	breq	.+32     	; 0x320 <__vector_19+0x34>
	{
		veces++;
 300:	80 91 65 00 	lds	r24, 0x0065
 304:	8f 5f       	subi	r24, 0xFF	; 255
 306:	80 93 65 00 	sts	0x0065, r24
		if (veces >= 4)
 30a:	80 91 65 00 	lds	r24, 0x0065
 30e:	84 30       	cpi	r24, 0x04	; 4
 310:	38 f0       	brcs	.+14     	; 0x320 <__vector_19+0x34>
		{
			veces=0;
 312:	10 92 65 00 	sts	0x0065, r1
			paso++;
 316:	80 91 62 00 	lds	r24, 0x0062
 31a:	8f 5f       	subi	r24, 0xFF	; 255
 31c:	80 93 62 00 	sts	0x0062, r24
				resetPaso();
				//break;
			}
		}*/
	}
}
 320:	8f 91       	pop	r24
 322:	0f 90       	pop	r0
 324:	0f be       	out	0x3f, r0	; 63
 326:	0f 90       	pop	r0
 328:	1f 90       	pop	r1
 32a:	18 95       	reti

0000032c <__vector_1>:

// INTERRUPCION
ISR (INT0_vect)
{
 32c:	1f 92       	push	r1
 32e:	0f 92       	push	r0
 330:	0f b6       	in	r0, 0x3f	; 63
 332:	0f 92       	push	r0
 334:	11 24       	eor	r1, r1
 336:	2f 93       	push	r18
 338:	3f 93       	push	r19
 33a:	4f 93       	push	r20
 33c:	5f 93       	push	r21
 33e:	6f 93       	push	r22
 340:	7f 93       	push	r23
 342:	8f 93       	push	r24
 344:	9f 93       	push	r25
 346:	af 93       	push	r26
 348:	bf 93       	push	r27
 34a:	ef 93       	push	r30
 34c:	ff 93       	push	r31
	while(1){
		activado=false;
 34e:	10 92 66 00 	sts	0x0066, r1
		intento++;
 352:	80 91 72 00 	lds	r24, 0x0072
 356:	8f 5f       	subi	r24, 0xFF	; 255
 358:	80 93 72 00 	sts	0x0072, r24
		resetPaso();
 35c:	0e 94 0d 01 	call	0x21a	; 0x21a <resetPaso>
		detener();
 360:	0e 94 7b 00 	call	0xf6	; 0xf6 <detener>
 364:	2f e3       	ldi	r18, 0x3F	; 63
 366:	8d e0       	ldi	r24, 0x0D	; 13
 368:	93 e0       	ldi	r25, 0x03	; 3
 36a:	21 50       	subi	r18, 0x01	; 1
 36c:	80 40       	sbci	r24, 0x00	; 0
 36e:	90 40       	sbci	r25, 0x00	; 0
 370:	e1 f7       	brne	.-8      	; 0x36a <__vector_1+0x3e>
 372:	00 c0       	rjmp	.+0      	; 0x374 <__vector_1+0x48>
 374:	00 00       	nop
		_delay_ms(1000);
		reversa();
 376:	0e 94 7e 00 	call	0xfc	; 0xfc <reversa>
 37a:	2f e3       	ldi	r18, 0x3F	; 63
 37c:	8d e0       	ldi	r24, 0x0D	; 13
 37e:	93 e0       	ldi	r25, 0x03	; 3
 380:	21 50       	subi	r18, 0x01	; 1
 382:	80 40       	sbci	r24, 0x00	; 0
 384:	90 40       	sbci	r25, 0x00	; 0
 386:	e1 f7       	brne	.-8      	; 0x380 <__vector_1+0x54>
 388:	00 c0       	rjmp	.+0      	; 0x38a <__vector_1+0x5e>
 38a:	00 00       	nop
		_delay_ms(1000);
		//eeprom_write_byte((uint8_t *)(250),(uint8_t)(locMOV));
		if (orientacion == 'N')
 38c:	80 91 64 00 	lds	r24, 0x0064
 390:	8e 34       	cpi	r24, 0x4E	; 78
 392:	a1 f4       	brne	.+40     	; 0x3bc <__vector_1+0x90>
		{
			if (intento == 1)
 394:	80 91 72 00 	lds	r24, 0x0072
 398:	81 30       	cpi	r24, 0x01	; 1
 39a:	31 f4       	brne	.+12     	; 0x3a8 <__vector_1+0x7c>
			{
				vueltaDerecha('D','D','E');	
 39c:	45 e4       	ldi	r20, 0x45	; 69
 39e:	64 e4       	ldi	r22, 0x44	; 68
 3a0:	84 e4       	ldi	r24, 0x44	; 68
 3a2:	0e 94 12 01 	call	0x224	; 0x224 <vueltaDerecha>
				break;
 3a6:	53 c0       	rjmp	.+166    	; 0x44e <__vector_1+0x122>
			}
			if (intento == 2)
 3a8:	80 91 72 00 	lds	r24, 0x0072
 3ac:	82 30       	cpi	r24, 0x02	; 2
 3ae:	31 f4       	brne	.+12     	; 0x3bc <__vector_1+0x90>
			{
				vueltaIzquierda('I','I','O');
 3b0:	4f e4       	ldi	r20, 0x4F	; 79
 3b2:	69 e4       	ldi	r22, 0x49	; 73
 3b4:	89 e4       	ldi	r24, 0x49	; 73
 3b6:	0e 94 29 01 	call	0x252	; 0x252 <vueltaIzquierda>
				break;
 3ba:	49 c0       	rjmp	.+146    	; 0x44e <__vector_1+0x122>
			}		
		}
		if (orientacion == 'S')
 3bc:	80 91 64 00 	lds	r24, 0x0064
 3c0:	83 35       	cpi	r24, 0x53	; 83
 3c2:	a1 f4       	brne	.+40     	; 0x3ec <__vector_1+0xc0>
		{
			if (intento == 1)
 3c4:	80 91 72 00 	lds	r24, 0x0072
 3c8:	81 30       	cpi	r24, 0x01	; 1
 3ca:	31 f4       	brne	.+12     	; 0x3d8 <__vector_1+0xac>
			{
				vueltaDerecha('D','I','O');
 3cc:	4f e4       	ldi	r20, 0x4F	; 79
 3ce:	69 e4       	ldi	r22, 0x49	; 73
 3d0:	84 e4       	ldi	r24, 0x44	; 68
 3d2:	0e 94 12 01 	call	0x224	; 0x224 <vueltaDerecha>
				break;
 3d6:	3b c0       	rjmp	.+118    	; 0x44e <__vector_1+0x122>
			}
			if (intento == 2)
 3d8:	80 91 72 00 	lds	r24, 0x0072
 3dc:	82 30       	cpi	r24, 0x02	; 2
 3de:	31 f4       	brne	.+12     	; 0x3ec <__vector_1+0xc0>
			{
				vueltaIzquierda('I','D','E');
 3e0:	45 e4       	ldi	r20, 0x45	; 69
 3e2:	64 e4       	ldi	r22, 0x44	; 68
 3e4:	89 e4       	ldi	r24, 0x49	; 73
 3e6:	0e 94 29 01 	call	0x252	; 0x252 <vueltaIzquierda>
				break;
 3ea:	31 c0       	rjmp	.+98     	; 0x44e <__vector_1+0x122>
			}
		}
		if (orientacion == 'E')
 3ec:	80 91 64 00 	lds	r24, 0x0064
 3f0:	85 34       	cpi	r24, 0x45	; 69
 3f2:	a1 f4       	brne	.+40     	; 0x41c <__vector_1+0xf0>
		{
			if (intento == 1)
 3f4:	80 91 72 00 	lds	r24, 0x0072
 3f8:	81 30       	cpi	r24, 0x01	; 1
 3fa:	31 f4       	brne	.+12     	; 0x408 <__vector_1+0xdc>
			{
				vueltaDerecha('D','B','S');
 3fc:	43 e5       	ldi	r20, 0x53	; 83
 3fe:	62 e4       	ldi	r22, 0x42	; 66
 400:	84 e4       	ldi	r24, 0x44	; 68
 402:	0e 94 12 01 	call	0x224	; 0x224 <vueltaDerecha>
				break;
 406:	23 c0       	rjmp	.+70     	; 0x44e <__vector_1+0x122>
			}
			if (intento == 2)
 408:	80 91 72 00 	lds	r24, 0x0072
 40c:	82 30       	cpi	r24, 0x02	; 2
 40e:	31 f4       	brne	.+12     	; 0x41c <__vector_1+0xf0>
			{
				vueltaIzquierda('I','A','N');
 410:	4e e4       	ldi	r20, 0x4E	; 78
 412:	61 e4       	ldi	r22, 0x41	; 65
 414:	89 e4       	ldi	r24, 0x49	; 73
 416:	0e 94 29 01 	call	0x252	; 0x252 <vueltaIzquierda>
				break;
 41a:	19 c0       	rjmp	.+50     	; 0x44e <__vector_1+0x122>
			}
		}
		if (orientacion == 'O')
 41c:	80 91 64 00 	lds	r24, 0x0064
 420:	8f 34       	cpi	r24, 0x4F	; 79
 422:	09 f0       	breq	.+2      	; 0x426 <__vector_1+0xfa>
 424:	94 cf       	rjmp	.-216    	; 0x34e <__vector_1+0x22>
		{
			if (intento==1)
 426:	80 91 72 00 	lds	r24, 0x0072
 42a:	81 30       	cpi	r24, 0x01	; 1
 42c:	31 f4       	brne	.+12     	; 0x43a <__vector_1+0x10e>
			{
				vueltaDerecha('D','A','N');
 42e:	4e e4       	ldi	r20, 0x4E	; 78
 430:	61 e4       	ldi	r22, 0x41	; 65
 432:	84 e4       	ldi	r24, 0x44	; 68
 434:	0e 94 12 01 	call	0x224	; 0x224 <vueltaDerecha>
				break;
 438:	0a c0       	rjmp	.+20     	; 0x44e <__vector_1+0x122>
			}
			if (intento == 2)
 43a:	80 91 72 00 	lds	r24, 0x0072
 43e:	82 30       	cpi	r24, 0x02	; 2
 440:	09 f0       	breq	.+2      	; 0x444 <__vector_1+0x118>
 442:	85 cf       	rjmp	.-246    	; 0x34e <__vector_1+0x22>
			{
				vueltaIzquierda('I','B','S');
 444:	43 e5       	ldi	r20, 0x53	; 83
 446:	62 e4       	ldi	r22, 0x42	; 66
 448:	89 e4       	ldi	r24, 0x49	; 73
 44a:	0e 94 29 01 	call	0x252	; 0x252 <vueltaIzquierda>
				break;
			}	
		}
		//_delay_ms(5000);
	}
}
 44e:	ff 91       	pop	r31
 450:	ef 91       	pop	r30
 452:	bf 91       	pop	r27
 454:	af 91       	pop	r26
 456:	9f 91       	pop	r25
 458:	8f 91       	pop	r24
 45a:	7f 91       	pop	r23
 45c:	6f 91       	pop	r22
 45e:	5f 91       	pop	r21
 460:	4f 91       	pop	r20
 462:	3f 91       	pop	r19
 464:	2f 91       	pop	r18
 466:	0f 90       	pop	r0
 468:	0f be       	out	0x3f, r0	; 63
 46a:	0f 90       	pop	r0
 46c:	1f 90       	pop	r1
 46e:	18 95       	reti

00000470 <darPaso>:

void darPaso(){
	if (activado==true)
 470:	80 91 66 00 	lds	r24, 0x0066
 474:	88 23       	and	r24, r24
 476:	f1 f0       	breq	.+60     	; 0x4b4 <darPaso+0x44>
	{
		if(paso==1)
 478:	80 91 62 00 	lds	r24, 0x0062
 47c:	81 30       	cpi	r24, 0x01	; 1
 47e:	d1 f4       	brne	.+52     	; 0x4b4 <darPaso+0x44>
		{
			if (intento == 1)
 480:	80 91 72 00 	lds	r24, 0x0072
 484:	81 30       	cpi	r24, 0x01	; 1
 486:	39 f4       	brne	.+14     	; 0x496 <darPaso+0x26>
			{
				escribirInsMov();
 488:	0e 94 bf 00 	call	0x17e	; 0x17e <escribirInsMov>
				intento=0;
 48c:	10 92 72 00 	sts	0x0072, r1
				resetPaso();
 490:	0e 94 0d 01 	call	0x21a	; 0x21a <resetPaso>
 494:	08 95       	ret
			}
			else if (intento == 2)
 496:	80 91 72 00 	lds	r24, 0x0072
 49a:	82 30       	cpi	r24, 0x02	; 2
 49c:	39 f4       	brne	.+14     	; 0x4ac <darPaso+0x3c>
			{
				escribirInsMov();
 49e:	0e 94 bf 00 	call	0x17e	; 0x17e <escribirInsMov>
				intento=0;
 4a2:	10 92 72 00 	sts	0x0072, r1
				resetPaso();
 4a6:	0e 94 0d 01 	call	0x21a	; 0x21a <resetPaso>
 4aa:	08 95       	ret
			}
			else {
				escribirPaso();
 4ac:	0e 94 44 01 	call	0x288	; 0x288 <escribirPaso>
				resetPaso();
 4b0:	0e 94 0d 01 	call	0x21a	; 0x21a <resetPaso>
 4b4:	08 95       	ret

000004b6 <darPasoSolo>:
		}
	}
}

void darPasoSolo(){
	PORTA = 1;
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	8b bb       	out	0x1b, r24	; 27
	PORTB = 1;
 4ba:	88 bb       	out	0x18, r24	; 24
 4bc:	2f e3       	ldi	r18, 0x3F	; 63
 4be:	8d e0       	ldi	r24, 0x0D	; 13
 4c0:	93 e0       	ldi	r25, 0x03	; 3
 4c2:	21 50       	subi	r18, 0x01	; 1
 4c4:	80 40       	sbci	r24, 0x00	; 0
 4c6:	90 40       	sbci	r25, 0x00	; 0
 4c8:	e1 f7       	brne	.-8      	; 0x4c2 <darPasoSolo+0xc>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <darPasoSolo+0x16>
 4cc:	00 00       	nop
	_delay_ms(1000);
	detener();
 4ce:	0e 94 7b 00 	call	0xf6	; 0xf6 <detener>
 4d2:	08 95       	ret

000004d4 <recorrerSolo>:
}

void recorrerSolo(){
	while (1)
	{
		uint8_t instCarro = eeprom_read_byte((uint8_t *)(loclocINST));
 4d4:	80 91 69 00 	lds	r24, 0x0069
 4d8:	90 91 6a 00 	lds	r25, 0x006A
 4dc:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__eerd_byte_m16a>
		sigInst = (char)instCarro;
 4e0:	80 93 73 00 	sts	0x0073, r24
 4e4:	87 ea       	ldi	r24, 0xA7	; 167
 4e6:	91 e6       	ldi	r25, 0x61	; 97
 4e8:	01 97       	sbiw	r24, 0x01	; 1
 4ea:	f1 f7       	brne	.-4      	; 0x4e8 <recorrerSolo+0x14>
 4ec:	00 c0       	rjmp	.+0      	; 0x4ee <recorrerSolo+0x1a>
 4ee:	00 00       	nop
		_delay_ms(100);
		if (sigInst!='F')
 4f0:	80 91 73 00 	lds	r24, 0x0073
 4f4:	86 34       	cpi	r24, 0x46	; 70
 4f6:	91 f0       	breq	.+36     	; 0x51c <recorrerSolo+0x48>
		{
			if (sigInst=='P')
 4f8:	80 91 73 00 	lds	r24, 0x0073
 4fc:	80 35       	cpi	r24, 0x50	; 80
 4fe:	11 f4       	brne	.+4      	; 0x504 <recorrerSolo+0x30>
			{
				darPasoSolo();
 500:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <darPasoSolo>
			}
			if (sigInst=='D')
 504:	80 91 73 00 	lds	r24, 0x0073
 508:	84 34       	cpi	r24, 0x44	; 68
 50a:	11 f4       	brne	.+4      	; 0x510 <recorrerSolo+0x3c>
			{
				vueltaDerechaSolo();
 50c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <vueltaDerechaSolo>
			}
			if (sigInst=='I')
 510:	80 91 73 00 	lds	r24, 0x0073
 514:	89 34       	cpi	r24, 0x49	; 73
 516:	11 f4       	brne	.+4      	; 0x51c <recorrerSolo+0x48>
			{
				vueltaIzquierdaSolo();
 518:	0e 94 00 01 	call	0x200	; 0x200 <vueltaIzquierdaSolo>
			}
		}
		loclocINST++;
 51c:	80 91 69 00 	lds	r24, 0x0069
 520:	90 91 6a 00 	lds	r25, 0x006A
 524:	01 96       	adiw	r24, 0x01	; 1
 526:	90 93 6a 00 	sts	0x006A, r25
 52a:	80 93 69 00 	sts	0x0069, r24
	}
 52e:	d2 cf       	rjmp	.-92     	; 0x4d4 <recorrerSolo>

00000530 <main>:
}

int main(void) 
{
	config();
 530:	0e 94 66 00 	call	0xcc	; 0xcc <config>
	detener();
 534:	0e 94 7b 00 	call	0xf6	; 0xf6 <detener>
	locINST= 0;
 538:	10 92 71 00 	sts	0x0071, r1
 53c:	10 92 70 00 	sts	0x0070, r1
	locMOV= 500;
 540:	84 ef       	ldi	r24, 0xF4	; 244
 542:	91 e0       	ldi	r25, 0x01	; 1
 544:	90 93 6c 00 	sts	0x006C, r25
 548:	80 93 6b 00 	sts	0x006B, r24
	loclocINST = 0;
 54c:	10 92 6a 00 	sts	0x006A, r1
 550:	10 92 69 00 	sts	0x0069, r1
	locLocMOV = 500;
 554:	90 93 6e 00 	sts	0x006E, r25
 558:	80 93 6d 00 	sts	0x006D, r24
	veces = 0;
 55c:	10 92 65 00 	sts	0x0065, r1
	paso = 0;
 560:	10 92 62 00 	sts	0x0062, r1
	orientacion = 'N';
 564:	8e e4       	ldi	r24, 0x4E	; 78
 566:	80 93 64 00 	sts	0x0064, r24
	movimiento = 'A';
 56a:	81 e4       	ldi	r24, 0x41	; 65
 56c:	80 93 68 00 	sts	0x0068, r24
	intento = 0;
 570:	10 92 72 00 	sts	0x0072, r1
	activado = false;
 574:	10 92 66 00 	sts	0x0066, r1
	recivido=false;
 578:	10 92 63 00 	sts	0x0063, r1
	//limpiarEEPROM();
	
	escribirMOV(movimiento);
 57c:	80 91 68 00 	lds	r24, 0x0068
 580:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <escribirMOV>
	
    while(1)
    {
		if (apretado(PINC,0))
 584:	98 9b       	sbis	0x13, 0	; 19
		{
			recorrer();
 586:	0e 94 75 00 	call	0xea	; 0xea <recorrer>
		}
		if (apretado(PINC,1))
 58a:	99 9b       	sbis	0x13, 1	; 19
		{
			rutaCompletada();
 58c:	0e 94 90 00 	call	0x120	; 0x120 <rutaCompletada>
		}
		if (apretado(PINC, 2))
 590:	9a 9b       	sbis	0x13, 2	; 19
		{
			recorrerSolo();
 592:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <recorrerSolo>
		}
		// REALIZAR PASO/CAMBIO DE MOVIMIENTO
		darPaso();
 596:	0e 94 38 02 	call	0x470	; 0x470 <darPaso>
		
		if (recivido==true)
 59a:	80 91 63 00 	lds	r24, 0x0063
 59e:	88 23       	and	r24, r24
 5a0:	89 f3       	breq	.-30     	; 0x584 <main+0x54>
		{
			recivido=false;
 5a2:	10 92 63 00 	sts	0x0063, r1
			
			//UDR='R';
			x=0;
 5a6:	10 92 60 00 	sts	0x0060, r1
			while( x != 0xff ){
 5aa:	80 91 60 00 	lds	r24, 0x0060
 5ae:	8f 3f       	cpi	r24, 0xFF	; 255
 5b0:	49 f3       	breq	.-46     	; 0x584 <main+0x54>
				x = (char)eeprom_read_byte((uint8_t *)(locLocMOV));
 5b2:	80 91 6d 00 	lds	r24, 0x006D
 5b6:	90 91 6e 00 	lds	r25, 0x006E
 5ba:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__eerd_byte_m16a>
 5be:	80 93 60 00 	sts	0x0060, r24
 5c2:	83 ec       	ldi	r24, 0xC3	; 195
 5c4:	99 e0       	ldi	r25, 0x09	; 9
 5c6:	01 97       	sbiw	r24, 0x01	; 1
 5c8:	f1 f7       	brne	.-4      	; 0x5c6 <main+0x96>
 5ca:	00 c0       	rjmp	.+0      	; 0x5cc <main+0x9c>
 5cc:	00 00       	nop
				//UDR = 'O';
				// Wait until last byte has been transmitted
				_delay_ms(10);
				while((UCSRA &(1<<UDRE)) == 0);
 5ce:	5d 9b       	sbis	0x0b, 5	; 11
 5d0:	fe cf       	rjmp	.-4      	; 0x5ce <main+0x9e>
				UDR = x;
 5d2:	80 91 60 00 	lds	r24, 0x0060
 5d6:	8c b9       	out	0x0c, r24	; 12
				//x = 'F';
				locLocMOV--;
 5d8:	80 91 6d 00 	lds	r24, 0x006D
 5dc:	90 91 6e 00 	lds	r25, 0x006E
 5e0:	01 97       	sbiw	r24, 0x01	; 1
 5e2:	90 93 6e 00 	sts	0x006E, r25
 5e6:	80 93 6d 00 	sts	0x006D, r24
		{
			recivido=false;
			
			//UDR='R';
			x=0;
			while( x != 0xff ){
 5ea:	80 91 60 00 	lds	r24, 0x0060
 5ee:	8f 3f       	cpi	r24, 0xFF	; 255
 5f0:	01 f7       	brne	.-64     	; 0x5b2 <main+0x82>
 5f2:	c8 cf       	rjmp	.-112    	; 0x584 <main+0x54>

000005f4 <__eerd_byte_m16a>:
 5f4:	e1 99       	sbic	0x1c, 1	; 28
 5f6:	fe cf       	rjmp	.-4      	; 0x5f4 <__eerd_byte_m16a>
 5f8:	9f bb       	out	0x1f, r25	; 31
 5fa:	8e bb       	out	0x1e, r24	; 30
 5fc:	e0 9a       	sbi	0x1c, 0	; 28
 5fe:	99 27       	eor	r25, r25
 600:	8d b3       	in	r24, 0x1d	; 29
 602:	08 95       	ret

00000604 <__eewr_byte_m16a>:
 604:	26 2f       	mov	r18, r22

00000606 <__eewr_r18_m16a>:
 606:	e1 99       	sbic	0x1c, 1	; 28
 608:	fe cf       	rjmp	.-4      	; 0x606 <__eewr_r18_m16a>
 60a:	9f bb       	out	0x1f, r25	; 31
 60c:	8e bb       	out	0x1e, r24	; 30
 60e:	2d bb       	out	0x1d, r18	; 29
 610:	0f b6       	in	r0, 0x3f	; 63
 612:	f8 94       	cli
 614:	e2 9a       	sbi	0x1c, 2	; 28
 616:	e1 9a       	sbi	0x1c, 1	; 28
 618:	0f be       	out	0x3f, r0	; 63
 61a:	01 96       	adiw	r24, 0x01	; 1
 61c:	08 95       	ret

0000061e <_exit>:
 61e:	f8 94       	cli

00000620 <__stop_program>:
 620:	ff cf       	rjmp	.-2      	; 0x620 <__stop_program>
